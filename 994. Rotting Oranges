public class Solution {

    private readonly int[][] _directions = [
        [-1, 0], [0, 1], [1, 0], [0, -1]
    ];

    public int OrangesRotting(int[][] grid) {
        int rows = grid.Length;
        int cols = grid[0].Length;
        int freshOranges = 0, timeToRotten = 0;

        Queue<(int, int)> queue = new();
        for(int row = 0; row < rows; row++)
        {
            for(int col = 0; col < cols; col++)
            {
                if(grid[row][col] == 1)
                {
                    freshOranges++;
                }
                else if (grid[row][col] == 2)
                {
                    queue.Enqueue((row, col));
                }
                else
                {
                    continue;
                }
            }
        }

        while(queue.Count != 0)
        {
            int n = queue.Count;
            for(int i = 0; i < n; i++)
            {
                (int row, int col) = queue.Dequeue();
                foreach(int[] dir in _directions)
                {
                    int newRow = row + dir[0];
                    int newCol = col + dir[1];

                    if(IsFreshOrange(grid, newRow, newCol, rows, cols))
                    {
                        freshOranges--;
                        grid[newRow][newCol] = 2;
                        queue.Enqueue((newRow, newCol));
                    }
                }
            }

            if(queue.Count == 0)
            {
                break;
            }

            timeToRotten++;
        }

        return freshOranges != 0 ? -1 : timeToRotten;
    }

    private bool IsFreshOrange(int[][] grid, int row, int col, int rows, int cols)
    {
        return row >= 0 && row < rows && col >= 0 && col < cols && grid[row][col] == 1;
    }
}
