public class Solution {
    public int LongestMountain(int[] arr) {
        int n = arr.Length;
        int[] leftToRight = new int[n];
        int[] rightToLeft = new int[n];

        Array.Fill(leftToRight, 1);
        Array.Fill(rightToLeft, 1);
    
        for(int i = 1; i < n; i++)
        {
            if(arr[i] > arr[i - 1])
            {
                leftToRight[i] = leftToRight[i - 1] + 1;
            }
        }

        for(int i = n - 2; i >= 0; i--)
        {
            if(arr[i] > arr[i + 1])
            {
                rightToLeft[i] = rightToLeft[i + 1] + 1;
            }
        }

        int longestMountain = 0;
        for(int i = 1; i < n - 1; i++)
        {
            if(leftToRight[i] > 1 && rightToLeft[i] > 1)
            {
                longestMountain = Math.Max(
                    longestMountain, leftToRight[i] + rightToLeft[i] - 1
                );
            }
        }
        return longestMountain;
    }
}
// Time Complexity: O(N)
// Space Complexity: O(N)

public class Solution {
    public int LongestMountain(int[] arr) {
        int longestMountain = 0;

        int n = arr.Length, i = 0;
        while(i < n)
        {
            int j = i;
            if(j + 1 < n && arr[j] < arr[j + 1])
            {
                while(j + 1 < n && arr[j] < arr[j + 1])
                    j++;
                
                if(j + 1 < n && arr[j] > arr[j + 1])
                {
                    while(j + 1 < n && arr[j] > arr[j + 1])
                        j++;
                    
                    longestMountain = Math.Max(longestMountain, j - i + 1);
                }
            }
            i = Math.Max(i + 1, j);
        }
        
        return longestMountain;
    }
}


// Time Complexity: O(N)
// Space Complexity: O(1)
