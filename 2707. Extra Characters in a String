public class Solution {
    public int MinExtraChar(string s, string[] dictionary) {
        TrieNode root = new();
        foreach(string word in dictionary)
        {
            Insert(root, word);
        }

        int n = s.Length;
        int[] dp = new int[n + 1];

        for(int i = 0; i < n + 1; i++)
        {
            dp[i] = i;
        }

        for(int i = 0; i < n; i++)
        {
            int j = i;
            TrieNode tempRoot = root;
            while(j < n)
            {
                if(tempRoot == null)
                {
                    break;
                }
                tempRoot = tempRoot.Childs[s[j] - 'a'];
                if(tempRoot != null && tempRoot.IsEndOfWord)
                {
                    dp[j + 1] = Math.Min(dp[j + 1], dp[i]);
                }
                j++;
            }
            dp[i + 1] = Math.Min(dp[i + 1], dp[i] + 1);
        }

        return dp[n];
    }

    private void Insert(TrieNode root, string key)
    {
        foreach(char ch in key)
        {
            if(root.Childs[ch - 'a'] == null)
            {
                root.Childs[ch - 'a'] = new();
            }
            root = root.Childs[ch - 'a'];
        }
        root.IsEndOfWord = true;
    }
}

public class TrieNode
{
    public TrieNode[] Childs { get; set; }
    public bool IsEndOfWord { get; set; }

    public TrieNode()
    {
        Childs = new TrieNode[26];
        IsEndOfWord = false;
    }
}
