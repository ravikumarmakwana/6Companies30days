public class Solution {
    private readonly int INF = 1_000_000_007;
    public int FindTheCity(int n, int[][] edges, int distanceThreshold) {
        int[][] graph = CreateGraph(edges, n);
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(i != j && graph[i][j] == 0)
                {
                    graph[i][j] = INF;
                }
            }
        }

        for(int k = 0; k < n; k++)
        {
            for(int i = 0; i < n; i++)
            {
                for(int j = 0; j < n; j++)
                {
                    if(graph[i][k] != INF && graph[k][j] != INF)
                    {
                        graph[i][j] = Math.Min(
                            graph[i][j],
                            graph[i][k] + graph[k][j]
                        );
                    }
                }
            }
        }

        int city = n - 1, count = n;
        for(int i = n - 1; i >= 0; i--)
        {
            int currentCount = 0;
            for(int j = 0; j < n; j++)
            {
                if(i != j && graph[i][j] <= distanceThreshold)
                {
                    currentCount++;
                }
            }
            if(count > currentCount)
            {
                city = i;
                count = currentCount;
            }
        }
        return city;
    }

    private int[][] CreateGraph(int[][] edges, int n)
    {
        int[][] graph = new int[n][];
        for(int i = 0; i < n; i++)
        {
            graph[i] = new int[n];
        }

        foreach(int[] edge in edges)
        {
            graph[edge[0]][edge[1]] = edge[2];
            graph[edge[1]][edge[0]] = edge[2];
        }

        return graph;
    }
}
